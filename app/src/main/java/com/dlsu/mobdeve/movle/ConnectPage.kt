package com.dlsu.mobdeve.movle

import android.util.Log
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.dlsu.mobdeve.movle.ui.theme.MovLeTheme
import com.google.firebase.firestore.ktx.firestore
import com.google.firebase.ktx.Firebase

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ConnectPage(
    onBackClick: () -> Unit,
    onSendCodeClick: () -> Unit,
    onReceiveCodeClick: (String) -> Unit,
    currentUserId: String,
    currentUserName: String
) {
    var generatedCode by remember { mutableStateOf<String?>(null) }
    var inputCode by remember { mutableStateOf("") }
    var isCodeGenerated by remember { mutableStateOf(false) }
    val db = Firebase.firestore

    // Function to generate an OTP and store it in Firebase with a unique identifier
    fun generateCodeAndStore() {
        val newCode = (100000..999999).random().toString()
        val uniqueId = db.collection("codes").document().id
        db.collection("codes").document(uniqueId)
            .set(mapOf("code" to newCode, "userName" to currentUserName, "userId" to currentUserId))
            .addOnSuccessListener {
                generatedCode = newCode
                isCodeGenerated = true
                Log.d("ConnectPage", "Generated and stored code: $newCode with ID: $uniqueId")
            }
            .addOnFailureListener { e ->
                Log.e("ConnectPage", "Failed to generate and store code", e)
            }
    }

    // Function to verify entered OTP and update the connection status
    fun verifyCode(code: String) {
        db.collection("codes")
            .whereEqualTo("code", code)
            .get()
            .addOnSuccessListener { documents ->
                if (documents.isEmpty) {
                    Log.d("ConnectPage", "OTP does not match")
                } else {
                    val otherUserName = documents.documents[0].getString("userName") ?: "Unknown User"
                    val otherUserId = documents.documents[0].getString("userId") ?: "Unknown UserId"

                    // Update User1's connection status
                    db.collection("connections").document(currentUserId)
                        .set(mapOf(
                            "status" to "connected",
                            "connectedUserId" to otherUserId
                        ))
                        .addOnSuccessListener {
                            // Update User2's connection status
                            db.collection("connections").document(otherUserId)
                                .set(mapOf(
                                    "status" to "connected",
                                    "connectedUserId" to currentUserId
                                ))
                                .addOnSuccessListener {
                                    Log.d("ConnectPage", "Connection status updated for both users")
                                    onReceiveCodeClick(otherUserName)
                                }
                                .addOnFailureListener { e ->
                                    Log.e("ConnectPage", "Failed to update other user's connection status", e)
                                }
                        }
                        .addOnFailureListener { e ->
                            Log.e("ConnectPage", "Failed to update current user's connection status", e)
                        }
                }
            }
            .addOnFailureListener { e ->
                Log.e("ConnectPage", "Failed to retrieve code", e)
            }
    }

    // Function to retrieve username from Firestore
    fun retrieveUserName(userId: String, callback: (String) -> Unit) {
        db.collection("users").document(userId)
            .get()
            .addOnSuccessListener { document ->
                if (document.exists()) {
                    val userName = document.getString("username") ?: "Unknown User"
                    callback(userName)
                }
            }
            .addOnFailureListener { e ->
                Log.e("ConnectPage", "Failed to retrieve user data", e)
            }
    }

    // Function to listen for connection status updates
    LaunchedEffect(Unit) {
        val userConnectionRef = db.collection("connections").document(currentUserId)
        userConnectionRef.addSnapshotListener { snapshot, e ->
            if (e != null) {
                Log.e("ConnectPage", "Listen failed", e)
                return@addSnapshotListener
            }

            if (snapshot != null && snapshot.exists()) {
                val status = snapshot.getString("status")
                val otherUserId = snapshot.getString("connectedUserId")
                if (status == "connected" && otherUserId != null) {
                    retrieveUserName(otherUserId) { otherUserName ->
                        onReceiveCodeClick(otherUserName)
                    }
                }
            }
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF5F5F5)) // Light grey background
    ) {
        // Background Image
        Image(
            painter = painterResource(id = R.drawable.top_connect_background),
            contentDescription = "Background",
            contentScale = ContentScale.Crop,
            modifier = Modifier
                .fillMaxWidth()
                .height(1000.dp)
                .offset(y = -20.dp)
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.SpaceEvenly
        ) {
            // Header
            Box(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(200.dp)
            ) {
                Image(
                    painter = painterResource(id = R.drawable.left_arrow),
                    contentDescription = "Back",
                    modifier = Modifier
                        .align(Alignment.TopStart)
                        .offset(y = -30.dp)
                        .padding(16.dp)
                        .size(30.dp)
                        .clickable { onBackClick() }
                )
                Text(
                    text = "Ready",
                    style = MaterialTheme.typography.headlineLarge.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = 40.sp,
                        color = Color.White
                    ),
                    modifier = Modifier
                        .align(Alignment.TopStart)
                        .offset(y = -25.dp)
                        .offset(x = 190.dp)
                )
                Text(
                    text = "Set",
                    style = MaterialTheme.typography.headlineLarge.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = 40.sp,
                        color = Color.White
                    ),
                    modifier = Modifier
                        .align(Alignment.TopStart)
                        .offset(y = 12.dp)
                        .offset(x = 190.dp)
                )
                Text(
                    text = "Connect",
                    style = MaterialTheme.typography.headlineLarge.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = 40.sp,
                        color = Color.White
                    ),
                    modifier = Modifier
                        .align(Alignment.TopStart)
                        .offset(y = 50.dp)
                        .offset(x = 190.dp)
                )
            }

            Spacer(modifier = Modifier.height(32.dp))

            // Finding Devices Animation
            Image(
                painter = painterResource(id = R.drawable.finding_devices_icon),
                contentDescription = "Finding Devices",
                contentScale = ContentScale.Fit,
                modifier = Modifier
                    .size(200.dp)
                    .offset(y = -50.dp)
            )

            Text(
                text = "Finding Devices...",
                style = MaterialTheme.typography.headlineSmall.copy(
                    fontWeight = FontWeight.Bold,
                    fontSize = 24.sp,
                    color = Color.Black
                )
            )

            // Display code or OTP input field
            if (isCodeGenerated) {
                Text(
                    text = "Generated Code: $generatedCode",
                    style = MaterialTheme.typography.bodyLarge.copy(
                        fontSize = 18.sp,
                        color = Color.Black
                    ),
                    modifier = Modifier.padding(vertical = 16.dp)
                )

                // Input field for OTP
                OutlinedTextField(
                    value = inputCode,
                    onValueChange = { newValue -> inputCode = newValue },
                    label = { Text("Enter OTP") },
                    modifier = Modifier.fillMaxWidth()
                )

                Button(
                    onClick = { verifyCode(inputCode) },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp)
                        .shadow(8.dp, RoundedCornerShape(50.dp)),
                    shape = RoundedCornerShape(50.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF1976D2))
                ) {
                    Text("Submit OTP")
                }
            } else {
                Button(
                    onClick = { generateCodeAndStore() },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp)
                        .shadow(8.dp, RoundedCornerShape(50.dp)),
                    shape = RoundedCornerShape(50.dp),
                    colors = ButtonDefaults.buttonColors(containerColor = Color(0xFFD32F2F))
                ) {
                    Text("Generate Code")
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun ConnectPagePreview() {
    MovLeTheme {
        ConnectPage(
            onBackClick = {},
            onSendCodeClick = {},
            onReceiveCodeClick = {},
            currentUserId = "user123",
            currentUserName = "User One"
        )
    }
}
